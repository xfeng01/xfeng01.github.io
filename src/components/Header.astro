---
const Navigation = [
  {
    title: "News",
    data: "#-news",
  },
  {
    title: "Publications",
    data: "#-publications",
  },
  {
    title: "Education",
    data: "#-educations",
  },
  {
    title: "Teaching",
    data: "#-teaching",
  },
  {
    title: "Honors & Awards",
    data: "#-honors-and-awards",
  },
  // Blog removed from navigation as requested
];
---

<nav class="navigation h-16 transition-colors duration-300" style="border: none !important; border-bottom: none !important; box-shadow: none !important; outline: none !important;">
  <div
    class="mx-auto max-w-[1300px] h-full flex items-center justify-between px-6"
  >
    <a
      href="/"
      class="nav-link font-bold text-xl text-gray-800 dark:text-gray-100 flex items-center space-x-2 group transition-colors duration-300"
      onclick="scrollToTop()"
    >
      <span class="text-2xl font-serif tracking-tight group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-300">Xinsong Feng</span>
    </a>
    
    <!-- Mobile view button group -->
    <div class="md:hidden flex items-center gap-2">
      <!-- Theme toggle button - mobile placed outside -->
      <button id="theme-toggle-mobile" class="theme-toggle-btn p-2 rounded-full bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 transition-colors">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 dark:hidden" fill="none" viewBox="0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 hidden dark:block" fill="none" viewBox="0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
      </button>
      
      <!-- Menu toggle button -->
      <button class="rounded-md p-2 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors text-gray-800 dark:text-gray-200" id="menu-toggle" aria-label="Toggle menu">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6"
          fill="none"
          viewBox="0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>
    
    <ul class="hidden md:flex items-center space-x-1" id="nav-menu">
      <li></li>
      {  
        Navigation.map((item) => (
          <li>
            <a href={item.data} class="nav-item relative px-4 py-2 rounded-md">
              {item.title}
            </a>
          </li>
        ))
      }
      <!-- Desktop theme toggle button, hidden on mobile -->
      <li class="hidden md:block">
        <button id="theme-toggle" class="theme-toggle-btn ml-2 p-2 rounded-full bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 dark:hidden" fill="none" viewBox="0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
          </svg>
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 hidden dark:block" fill="none" viewBox="0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
          </svg>
        </button>
      </li>
    </ul>
  </div>
</nav>

<style>
  .navigation {
    background-color: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border: none !important;
    border-bottom: none !important;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    width: 100vw;
    z-index: 1000;
    box-shadow: none !important;
    transition: all 0.3s ease;
  }

  .dark .navigation {
    background-color: rgba(31, 41, 55, 0.95);
    border: none !important;
    border-bottom: none !important;
    box-shadow: none !important;
  }

  .navigation.scrolled {
    box-shadow: none; /* Remove shadow effect when scrolled */
    height: 3.5rem;
  }

  .navigation ul {
    list-style-type: none;
    display: flex;
    padding: 0;
    margin: 0;
  }

  .nav-item {
    color: #4b5563;
    text-decoration: none;
    font-weight: 500;
    display: inline-block;
    transition: all 0.2s ease;
  }

  .nav-item:hover {
    color: #1d4ed8;
    background-color: rgba(219, 234, 254, 0.4);
  }

  .nav-item::after {
    content: '';
    position: absolute;
    width: 0;
    height: 2px;
    bottom: 0;
    left: 50%;
    background-color: #3b82f6;
    transition: all 0.3s ease;
    transform: translateX(-50%);
  }

  .nav-item:hover::after {
    width: 80%;
  }

  .dark .nav-item {
    color: #e5e7eb;
  }

  .dark .nav-item:hover {
    color: #93c5fd;
    background-color: rgba(30, 58, 138, 0.3);
  }

  @media screen and (max-width: 768px) {
    #nav-menu {
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      background-color: rgba(255, 255, 255, 0.98);
      flex-direction: column;
      padding: 0.75rem 0;
      border-bottom: 1px solid #eaeaea;
      display: none;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      z-index: 1000; /* Ensure menu displays above other elements */
    }

    .dark #nav-menu {
      background-color: rgba(31, 41, 55, 0.98) !important;
      border-bottom: 1px solid #4b5563;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);
    }

    #nav-menu.show {
      display: flex;
    }

    .navigation li {
      width: 100%;
      margin: 0;
      padding: 0.25rem 1.5rem;
    }

    .nav-item {
      display: block;
      padding: 0.75rem 1rem;
      width: 100%;
      color: #4b5563; /* Light mode text color */
    }

    .dark .nav-item {
      color: #e5e7eb !important; /* Dark mode text color, use !important to ensure it overrides other styles */
    }

    .nav-item::after {
      display: none;
    }
    
    .nav-item:hover {
      color: #1d4ed8; /* Light mode hover color */
      background-color: rgba(219, 234, 254, 0.4);
    }
    
    .dark .nav-item:hover {
      color: #93c5fd !important; /* Dark mode hover color */
      background-color: rgba(30, 58, 138, 0.3);
    }
    
    .dark .theme-toggle-btn {
      background-color: rgba(55, 65, 81, 0.8);
    }
    
    .dark .theme-toggle-btn:hover {
      background-color: rgba(75, 85, 99, 0.8);
    }
  }

  /* Force dark mode styles */
  :global(.dark) .navigation {
    background-color: rgba(31, 41, 55, 0.95) !important;
    border-bottom: none !important; /* Remove border in dark mode */
  }
  
  :global(.dark) .nav-item {
    color: #e5e7eb !important;
  }
  
  :global(.dark) .nav-item:hover {
    color: #93c5fd !important;
    background-color: rgba(30, 58, 138, 0.3) !important;
  }
  
  :global(.dark) .nav-link {
    color: #f3f4f6 !important;
  }
</style>

<style is:global>
  /* Use highest priority selectors to remove navigation bar borders */
  nav.navigation,
  nav.navigation.scrolled,
  html body nav.navigation,
  html.dark body nav.navigation,
  html:not(.dark) body nav.navigation {
    border: none !important;
    border-bottom: none !important;
    border-top: none !important;
    border-left: none !important;
    border-right: none !important;
    box-shadow: none !important;
    outline: none !important;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const menuToggle = document.getElementById("menu-toggle");
    const navMenu = document.getElementById("nav-menu");
    const navigation = document.querySelector(".navigation");
    const themeToggle = document.getElementById("theme-toggle");
    const themeToggleMobile = document.getElementById("theme-toggle-mobile");

    // Function to force apply dark mode styles to the menu
    const applyDarkModeToMenu = () => {
      if (document.documentElement.classList.contains('dark')) {
        if (navMenu) {
          navMenu.style.backgroundColor = "rgba(31, 41, 55, 0.98)";
          navMenu.style.borderBottom = "1px solid #4b5563";
          navMenu.style.color = "#e5e7eb";
        }
      } else {
        if (navMenu) {
          navMenu.style.backgroundColor = "rgba(255, 255, 255, 0.98)";
          navMenu.style.borderBottom = "1px solid #eaeaea";
          navMenu.style.color = "";
        }
      }
    };

    // Scrolling effect for navigation
    window.addEventListener("scroll", () => {
      if (!navigation) return; // Add null check
      
      if (window.scrollY > 10) {
        navigation.classList.add("scrolled");
      } else {
        navigation.classList.remove("scrolled");
      }
    });

    // Mobile menu toggle
    if (menuToggle && navMenu) {
      menuToggle.addEventListener("click", () => {
        navMenu.classList.toggle("show");
        // Apply dark mode styles when opening menu
        applyDarkModeToMenu();
      });
    }

    // Close mobile menu when clicking a navigation item
    const navItems = document.querySelectorAll(".nav-item");
    navItems.forEach(item => {
      item.addEventListener("click", () => {
        if (window.innerWidth < 768 && navMenu) { // Add null check for navMenu
          navMenu.classList.remove("show");
        }
      });
    });

    // Dark mode toggle
    const toggleDarkMode = () => {
      // Temporarily disable all transition effects before switching
      document.documentElement.classList.add('no-transition');
      document.body.classList.add('no-transition');
      
      // Force reflow to apply no-transition
      document.documentElement.offsetHeight;
      
      // Toggle theme class
      document.documentElement.classList.toggle('dark');
      document.body.classList.toggle('dark-mode');
      
      // Save user preference
      if (document.documentElement.classList.contains('dark')) {
        localStorage.theme = 'dark';
      } else {
        localStorage.theme = 'light';
      }

      // Apply dark styles to menu when switching theme
      applyDarkModeToMenu();
      
      // Use requestAnimationFrame to ensure DOM updates before restoring transition effects
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          document.documentElement.classList.remove('no-transition');
          document.body.classList.remove('no-transition');
        });
      });
    };

    if (themeToggle) {
      // Apply dark mode immediately if needed
      const applyDarkMode = () => {
        // Disable transitions on initial load
        document.documentElement.classList.add('no-transition');
        document.body.classList.add('no-transition');
        
        if (localStorage.theme === 'dark' || 
            (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
          document.documentElement.classList.add('dark');
          document.body.classList.add('dark-mode');
        } else {
          document.documentElement.classList.remove('dark');
          document.body.classList.remove('dark-mode');
        }
        // Also apply dark styles to menu
        applyDarkModeToMenu();
        
        // Restore transition effects after initial theme setup
        setTimeout(() => {
          document.documentElement.classList.remove('no-transition');
          document.body.classList.remove('no-transition');
        }, 100);
      };

      // Apply on load
      applyDarkMode();

      // Toggle dark mode on button click
      themeToggle.addEventListener("click", toggleDarkMode);

      // Watch for system preference changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', applyDarkMode);
    }

    if (themeToggleMobile) {
      themeToggleMobile.addEventListener("click", toggleDarkMode);
    }
    
    // We need to expose scrollToTop to the global scope since it's used in inline onclick
    // @ts-expect-error: 添加自定义属性到window对象
    window.scrollToTop = scrollToTop;
  });

  function scrollToTop() {
    window.scrollTo({ top: 0, behavior: "smooth" });
  }
</script>
