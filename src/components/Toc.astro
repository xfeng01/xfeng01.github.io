---
import type { MarkdownHeading } from "astro";
import { site } from "../consts";

interface Props {
  class?: string;
  headings: MarkdownHeading[];
}

let { headings = [] } = Astro.props;

let minDepth = 10;
for (const heading of headings) {
  minDepth = Math.min(minDepth, heading.depth);
}

const className = Astro.props.class;

const removeTailingHash = (text: string) => {
  let lastIndexOfHash = text.lastIndexOf("#");
  if (lastIndexOfHash != text.length - 1) {
    return text;
  }

  return text.substring(0, lastIndexOfHash);
};

const maxLevel = site.toc.depth;
---

<style is:inline>
  /* Use inline styles to ensure they are applied */
  .toc-item {
    color: #4b5563 !important;
    transition: all 0.2s ease;
    padding-top: 2px;
    padding-bottom: 2px;
    margin-bottom: 2px;
    font-size: 0.875rem;
    display: flex;
    gap: 6px;
    width: 100%;
    align-items: flex-start; /* Align at the top */
  }
  
  .toc-item:hover {
    color: #111827 !important;
  }
  
  .toc-item.visible {
    font-weight: 500 !important;
    color: #111827 !important;
  }
  
  .toc-level-1 {
    font-weight: 500;
    color: #374151 !important;
  }
  
  .toc-level-2 {
    color: #4b5563 !important;
    padding-left: 12px;
  }
  
  .toc-level-3 {
    color: #6b7280 !important;
    font-size: 0.75rem;
    padding-left: 24px;
  }
  
  .toc-dot {
    border-radius: 50%;
    flex-shrink: 0;
    margin-top: 0.55em; 
  }
  
  .toc-level-1 .toc-dot {
    width: 6px;
    height: 6px;
    background-color: #4b5563;
  }
  
  .toc-level-2 .toc-dot {
    width: 5px;
    height: 5px;
    background-color: #6b7280;
  }
  
  .toc-level-3 .toc-dot {
    width: 4px;
    height: 4px;
    background-color: #9ca3af;
  }
  
  /* Dark mode */
  .dark .toc-item {
    color: #d1d5db !important;
  }
  
  .dark .toc-item:hover {
    color: #f3f4f6 !important;
  }
  
  .dark .toc-item.visible {
    color: #f9fafb !important;
  }
  
  .dark .toc-level-1 {
    color: #e5e7eb !important;
  }
  
  .dark .toc-level-2 {
    color: #d1d5db !important;
  }
  
  .dark .toc-level-3 {
    color: #9ca3af !important;
  }
  
  .dark .toc-level-1 .toc-dot {
    background-color: #d1d5db;
  }
  
  .dark .toc-level-2 .toc-dot {
    background-color: #9ca3af;
  }
  
  .dark .toc-level-3 .toc-dot {
    background-color: #6b7280;
  }
</style>

<table-of-contents id="toc" class:list={[className, "group"]}>
  <div id="toc-inner-wrapper">
    {
      headings
        .filter((heading) => heading.depth < minDepth + maxLevel)
        .map((heading) => (
          <a
            href={`#${heading.slug}`}
            class={`toc-item toc-level-${heading.depth - minDepth + 1}`}
          >
            <div class="toc-dot"></div>
            <span class="break-words line-clamp-2">{removeTailingHash(heading.text)}</span>
          </a>
        ))
    }
  </div>
</table-of-contents>

<script>
  class TableOfContents extends HTMLElement {
    tocEl: HTMLElement | null = null;
    visibleClass = "visible";
    observer: IntersectionObserver;
    anchorNavTarget: HTMLElement | null = null;
    headingIdxMap = new Map<string, number>();
    headings: HTMLElement[] = [];
    sections: HTMLElement[] = [];
    tocEntries: HTMLAnchorElement[] = [];
    active: boolean[] = [];
    activeIndicator: HTMLElement | null = null;

    constructor() {
      super();
      this.observer = new IntersectionObserver(this.markVisibleSection, {
        threshold: 0,
        rootMargin: "-100px 0px -66% 0px"
      });
    }

    markVisibleSection = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        const id = entry.target.children[0]?.getAttribute("id");
        const idx = id ? this.headingIdxMap.get(id) : undefined;
        if (idx != undefined) this.active[idx] = entry.isIntersecting;

        if (
          entry.isIntersecting &&
          this.anchorNavTarget == entry.target.firstChild
        )
          this.anchorNavTarget = null;
      });

      if (!this.active.includes(true)) this.fallback();
      this.update();
    };

    toggleActiveHeading = () => {
      let i = this.active.length - 1;
      let min = this.active.length - 1,
        max = 0;
      while (i >= 0 && !this.active[i]) {
        this.tocEntries[i].classList.remove(this.visibleClass);
        i--;
      }
      while (i >= 0 && this.active[i]) {
        this.tocEntries[i].classList.add(this.visibleClass);
        min = Math.min(min, i);
        max = Math.max(max, i);
        i--;
      }
      while (i >= 0) {
        this.tocEntries[i].classList.remove(this.visibleClass);
        i--;
      }
      let parentOffset = this.tocEl?.getBoundingClientRect().top || 0;
      let scrollOffset = this.tocEl?.scrollTop || 0;
      let top =
        this.tocEntries[min].getBoundingClientRect().top -
        parentOffset +
        scrollOffset;
      let bottom =
        this.tocEntries[max].getBoundingClientRect().bottom -
        parentOffset +
        scrollOffset;
      this.activeIndicator?.setAttribute(
        "style",
        `top: ${top}px; height: ${bottom - top}px`
      );
    };

    scrollToActiveHeading = () => {
      // If the TOC widget can accommodate both the topmost
      // and bottommost items, scroll to the topmost item.
      // Otherwise, scroll to the bottommost one.

      if (this.anchorNavTarget || !this.tocEl) return;
      const activeHeading = document.querySelectorAll<HTMLDivElement>(
        `#toc .${this.visibleClass}`
      );
      if (!activeHeading.length) return;

      const topmost = activeHeading[0];
      const bottommost = activeHeading[activeHeading.length - 1];
      const tocHeight = this.tocEl.clientHeight;

      let top;
      if (
        bottommost.getBoundingClientRect().bottom -
          topmost.getBoundingClientRect().top <
        0.9 * tocHeight
      )
        top = topmost.offsetTop - 32;
      else top = bottommost.offsetTop - tocHeight * 0.8;

      this.tocEl.scrollTo({
        top,
        left: 0,
        behavior: "smooth",
      });
    };

    update = () => {
      requestAnimationFrame(() => {
        this.toggleActiveHeading();
        this.scrollToActiveHeading();
      });
    };

    fallback = () => {
      if (!this.sections.length) return;

      for (let i = 0; i < this.sections.length; i++) {
        let offsetTop = this.sections[i].getBoundingClientRect().top;
        let offsetBottom = this.sections[i].getBoundingClientRect().bottom;

        if (
          this.isInRange(offsetTop, 0, window.innerHeight) ||
          this.isInRange(offsetBottom, 0, window.innerHeight) ||
          (offsetTop < 0 && offsetBottom > window.innerHeight)
        ) {
          this.markActiveHeading(i);
        } else if (offsetTop > window.innerHeight) break;
      }
    };

    markActiveHeading = (idx: number) => {
      this.active[idx] = true;
    };

    handleAnchorClick = (event: Event) => {
      const anchor = event
        .composedPath()
        .find((element) => element instanceof HTMLAnchorElement);

      if (anchor) {
        const id = decodeURIComponent(anchor.hash?.substring(1));
        const idx = this.headingIdxMap.get(id);
        if (idx !== undefined) {
          this.anchorNavTarget = this.headings[idx];
        } else {
          this.anchorNavTarget = null;
        }
      }
    };

    isInRange(value: number, min: number, max: number) {
      return min < value && value < max;
    }

    connectedCallback() {
      // Wait for animation to complete before initializing
      setTimeout(() => {
        this.init();
      }, 100);
    }

    init() {
      this.tocEl = document.getElementById("toc-inner-wrapper");

      if (!this.tocEl) return;

      this.tocEl.addEventListener("click", this.handleAnchorClick, {
        capture: true,
      });

      this.activeIndicator = document.getElementById("active-indicator");

      this.tocEntries = Array.from(
        document.querySelectorAll<HTMLAnchorElement>("#toc a[href^='#']")
      );

      if (this.tocEntries.length === 0) return;

      this.sections = new Array(this.tocEntries.length);
      this.headings = new Array(this.tocEntries.length);
      for (let i = 0; i < this.tocEntries.length; i++) {
        const id = decodeURIComponent(this.tocEntries[i].hash?.substring(1));
        const heading = document.getElementById(id);
        const section = heading?.parentElement;
        if (heading instanceof HTMLElement && section instanceof HTMLElement) {
          this.headings[i] = heading;
          this.sections[i] = section;
          this.headingIdxMap.set(id, i);
        }
      }
      this.active = new Array(this.tocEntries.length).fill(false);

      this.sections.forEach((section) => this.observer.observe(section));

      this.fallback();
      this.update();
      
      // Add scroll listener to update active indicator
      window.addEventListener('scroll', this.update, { passive: true });
    }

    disconnectedCallback() {
      this.sections.forEach((section) => this.observer.unobserve(section));
      this.observer.disconnect();
      this.tocEl?.removeEventListener("click", this.handleAnchorClick);
      window.removeEventListener('scroll', this.update);
    }
  }

  customElements.define("table-of-contents", TableOfContents);
</script>
