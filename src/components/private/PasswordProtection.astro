---
import { privateArea } from "../../consts";
---

<div class="password-protection" id="password-protection">
  <div class="flex flex-col items-center justify-center min-h-[50vh]">
    <div class="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md w-full max-w-md">
      <h2 class="text-2xl font-bold text-gray-800 dark:text-white mb-6 text-center">Private Area</h2>
      <p class="text-gray-600 dark:text-gray-300 mb-6 text-center">This area contains your private notes. Please enter the password to access</p>
      
      <div class="mb-4">
        <input 
          type="password" 
          id="password-input"
          class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          placeholder="Enter password"
        />
      </div>
      
      <button 
        id="verify-button"
        class="w-full bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-md transition duration-300"
      >
        Verify
      </button>
      
      <p id="error-message" class="text-red-500 mt-3 text-center hidden">Incorrect password, please try again</p>
    </div>
  </div>
</div>

<div id="content-container" class="hidden">
  <slot />
</div>

<script define:vars={{ passwordHash: privateArea.passwordHash }}>
  // Simple password hashing, in real applications more secure methods should be used
  // The password hash is now imported from consts.ts for easier management
  const CORRECT_PASSWORD_HASH = passwordHash;
  
  // Expiration time in milliseconds (24 hours)
  const EXPIRATION_TIME = 24 * 60 * 60 * 1000;
  
  // Simple SHA-256 hash function
  async function hashPassword(password) {
    const encoder = new TextEncoder();
    const data = encoder.encode(password);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    return hashHex;
  }

  // Initialize state
  const init = () => {
    const storedAuth = localStorage.getItem('privateAuth');
    const authTimestamp = localStorage.getItem('privateAuthTimestamp');
    
    if (storedAuth === 'true' && authTimestamp) {
      const currentTime = Date.now();
      const timestamp = parseInt(authTimestamp);
      
      // Check if authentication is still valid (within 24 hours)
      if (currentTime - timestamp < EXPIRATION_TIME) {
        // Authentication is valid, show content
        document.getElementById('password-protection').classList.add('hidden');
        document.getElementById('content-container').classList.remove('hidden');
      } else {
        // Authentication expired, clear stored values
        localStorage.removeItem('privateAuth');
        localStorage.removeItem('privateAuthTimestamp');
      }
    }
  };

  // Verify password
  const verifyPassword = async () => {
    const passwordInput = document.getElementById('password-input');
    const errorMessage = document.getElementById('error-message');
    
    const inputHash = await hashPassword(passwordInput.value);
    
    if (inputHash === CORRECT_PASSWORD_HASH) {
      // Save authentication state with current timestamp
      localStorage.setItem('privateAuth', 'true');
      localStorage.setItem('privateAuthTimestamp', Date.now().toString());
      
      document.getElementById('password-protection').classList.add('hidden');
      document.getElementById('content-container').classList.remove('hidden');
      errorMessage.classList.add('hidden');
    } else {
      errorMessage.classList.remove('hidden');
      passwordInput.value = '';
    }
  };

  // Add event listeners
  document.addEventListener('DOMContentLoaded', () => {
    init();
    
    const verifyButton = document.getElementById('verify-button');
    verifyButton.addEventListener('click', verifyPassword);
    
    const passwordInput = document.getElementById('password-input');
    passwordInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        verifyPassword();
      }
    });
  });
</script>