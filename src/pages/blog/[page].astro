---
import { getCollection } from "astro:content";
import type { GetStaticPathsOptions, Page } from "astro";
import type { CollectionEntry } from "astro:content";
import { blog } from "../../consts";
import MainLayout from "../../layouts/MainLayout.astro";
import PostCard from "../../components/PostCard.astro";
import TagsList from "../../components/TagsList.astro"; 

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const allPosts = await getCollection("posts");

  const sortedPosts = allPosts.sort(
    (a, b) => b.data.published.getTime() - a.data.published.getTime()
  );

  return paginate(sortedPosts, { pageSize: blog.postsPerPage });
}

interface Props {
  page: Page<CollectionEntry<"posts">>;
}

const { page } = Astro.props;
const pathname = new URL(Astro.request.url).pathname.split("/");
const currentPage = pathname.length > 2 ? pathname[pathname.length - 1] : "";
---

<MainLayout>
  <div class="px-4 sm:px-6 md:px-0">
    <div class="flex flex-col justify-between items-start mb-4">
      <div class="w-full mb-2">
        <TagsList />
      </div>
      <div class="search-container w-full">
        <input 
          type="text" 
          id="searchInput"
          placeholder="Search..." 
          class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
    </div>

    <div>
      <ul id="postsContainer" class="p-0 m-0">
        {
          page.data.map((post) => (
            <PostCard
              title={post.data.title}
              date={post.data.published.toLocaleDateString("default").slice(0, 10)}
              description={post.data.description}
              url={`/posts/${post.id}/`}
            />
          ))
        }
      </ul>
    </div>
  
    <div id="noResults" class="hidden text-center py-6 text-gray-500 dark:text-gray-400">
      No posts found matching your search.
    </div>

    <div class="flex justify-center mt-8">
      <div class="flex items-center gap-4">
        {
          page.url.prev && (
            <a
              href={page.url.prev}
              class="inline-flex items-center justify-center px-4 py-2 h-10 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
            >
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
              <span class="ml-1">Previous</span>
            </a>
          )
        }
        
        <div class="inline-flex rounded-md overflow-hidden">
          {
            [...Array(page.lastPage)].map((_, i) => (
              <a
                href={i === 0 ? "/blog" : `/blog/${i + 1}`}
                class={`relative inline-flex items-center justify-center w-10 h-10 text-sm font-medium transition-colors ${
                  (i === 0 && currentPage === "") || String(i + 1) === currentPage
                    ? "bg-blue-600 text-white"
                    : "bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600"
                }`}
                aria-current={(i === 0 && currentPage === "") || String(i + 1) === currentPage ? "page" : undefined}
              >
                {i + 1}
              </a>
            ))
          }
        </div>
        
        {
          page.url.next && (
            <a
              href={page.url.next}
              class="inline-flex items-center justify-center px-4 py-2 h-10 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
            >
              <span class="mr-1">Next</span>
              <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          )
        }
      </div>
    </div>
  </div>
</MainLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput');
    const postsContainer = document.getElementById('postsContainer');
    const noResults = document.getElementById('noResults');
    
    if (!searchInput || !postsContainer || !noResults) return;
    
    const allPostItems = Array.from(postsContainer.children);

    searchInput.addEventListener('input', () => {
      const searchTerm = (searchInput as HTMLInputElement).value.toLowerCase().trim();
      let hasResults = false;

      allPostItems.forEach(post => {
        const titleElement = post.querySelector('h2');
        if (!titleElement) return;
        
        const title = titleElement.textContent?.toLowerCase() || '';
        const matches = title.includes(searchTerm);
        
        post.classList.toggle('hidden', !matches);
        
        if (matches) {
          hasResults = true;
        }
      });

      noResults.classList.toggle('hidden', hasResults);
    });
  });
</script>