---
import { getCollection } from "astro:content";
import type { GetStaticPathsOptions, Page } from "astro";
import type { CollectionEntry } from "astro:content";
import { blog } from "../../consts";
import MainLayout from "../../layouts/MainLayout.astro";
import PostCard from "../../components/PostCard.astro";
import TagsList from "../../components/TagsList.astro"; // 引入标签组件

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const allPosts = await getCollection("posts");

  const sortedPosts = allPosts.sort(
    (a, b) => b.data.published.getTime() - a.data.published.getTime()
  );

  return paginate(sortedPosts, { pageSize: blog.postsPerPage });
}

interface Props {
  page: Page<CollectionEntry<"posts">>;
}

const { page } = Astro.props;
const pathname = new URL(Astro.request.url).pathname.split("/");
const currentPage = pathname.length > 2 ? pathname[pathname.length - 1] : "";
const activeClass =
  "bg-purple-700 text-white border-purple-700 text-white opacity-100";
---

<MainLayout>
  <div class="flex flex-col justify-between items-start mb-6">
    <div class="w-full mb-4">
      <TagsList />
    </div>
    <div class="search-container w-full">
      <input 
        type="text" 
        id="searchInput"
        placeholder="Search..." 
        class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
    </div>
  </div>

  <ul id="postsContainer">
    {
      page.data.map((post) => (
        <PostCard
          title={post.data.title}
          date={post.data.published.toLocaleDateString("default").slice(0, 10)}
          description={post.data.description}
          url={`/posts/${post.id}/`}
        />
      ))
    }
  </ul>
  
  <div id="noResults" class="hidden text-center py-6 text-gray-500 dark:text-gray-400">
    No posts found matching your search.
  </div>

  <!-- 美化分页控件 -->
  <div class="flex justify-center mt-10">
    <div class="inline-flex items-center rounded-md overflow-hidden shadow-sm">
      <!-- 上一页按钮 -->
      {
        page.url.prev ? (
          <a
            href={page.url.prev}
            class="relative inline-flex items-center px-4 py-2 text-sm font-medium bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 group transition-colors"
          >
            <svg class="w-4 h-4 mr-1.5 group-hover:-translate-x-0.5 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            <span>Previous</span>
          </a>
        ) : null
      }
      
      <!-- 页码 -->
      {
        [...Array(page.lastPage)].map((_, i) => (
          <a
            href={i === 0 ? "/blog" : `/blog/${i + 1}`}
            class={`relative inline-flex items-center px-4 py-2 text-sm font-medium transition-colors ${
              (i === 0 && currentPage === "") || currentPage === (i + 1).toString()
                ? "bg-blue-600 text-white hover:bg-blue-700"
                : "bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 border-l border-gray-200 dark:border-gray-700"
            }`}
            aria-current={(i === 0 && currentPage === "") || currentPage === (i + 1).toString() ? "page" : undefined}
          >
            {i + 1}
          </a>
        ))
      }
      
      <!-- 下一页按钮 -->
      {
        page.url.next ? (
          <a
            href={page.url.next}
            class="relative inline-flex items-center px-4 py-2 text-sm font-medium bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 border-l border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 group transition-colors"
          >
            <span>Next</span>
            <svg class="w-4 h-4 ml-1.5 group-hover:translate-x-0.5 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </a>
        ) : null
      }
    </div>
  </div>
</MainLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput');
    const postsContainer = document.getElementById('postsContainer');
    const noResults = document.getElementById('noResults');
    const allPostItems = Array.from(postsContainer.children);

    searchInput.addEventListener('input', () => {
      const searchTerm = searchInput.value.toLowerCase().trim();
      let hasResults = false;

      allPostItems.forEach(post => {
        const title = post.querySelector('h2').textContent.toLowerCase();
        const matches = title.includes(searchTerm);
        
        post.classList.toggle('hidden', !matches);
        
        if (matches) {
          hasResults = true;
        }
      });

      noResults.classList.toggle('hidden', hasResults);
    });
  });
</script>