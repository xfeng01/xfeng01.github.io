---
import { getCollection } from "astro:content";
import { privateArea } from "../../../consts";
import MainLayout from "../../../layouts/MainLayout.astro";
import PostCard from "../../../components/PostCard.astro";
import TagsList from "../../../components/TagsList.astro";
import PasswordProtection from "../../../components/private/PasswordProtection.astro";

// Get the current page number from params
export async function getStaticPaths({ paginate }) {
  const allPrivatePosts = await getCollection("personal");
  
  // Sort posts by published date (newest first)
  const sortedPosts = allPrivatePosts.sort(
    (a, b) => b.data.published.getTime() - a.data.published.getTime()
  );
  
  // Generate pages for pagination
  return paginate(sortedPosts, { pageSize: privateArea.postsPerPage || 10 });
}

// Get pagination data from props
const { page } = Astro.props;
const { data: posts, currentPage, lastPage, url } = page;

// Get all unique tags from private posts
const allTags = [...new Set(posts.flatMap(post => post.data.tags || []))];
---

<MainLayout title={`Private Area | Page ${currentPage} | Xinsong Feng`} description="Private content area for personal notes and research">
  <PasswordProtection>
    <div class="px-4 sm:px-6 md:px-0">
      <div class="mb-6">
        <h1 class="text-2xl font-bold text-gray-800 dark:text-gray-100 mb-2">Private Notes</h1>
        <p class="text-gray-600 dark:text-gray-400">Personal research notes and protected content - Page {currentPage} of {lastPage}</p>
      </div>

      <div class="flex flex-col justify-between items-start mb-4">
        {/* Tag list for filtering */}
        <div class="w-full mb-2">
          <TagsList tags={allTags} baseUrl="/private/tags/" />
        </div>
        
        {/* Search box */}
        <div class="search-container w-full">
          <input 
            type="text" 
            id="searchInput"
            placeholder="Search private notes..." 
            class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>

      {/* Post list */}
      <div>
        <ul id="postsContainer" class="p-0 m-0">
          {
            posts.map((post) => (
              <PostCard
                title={post.data.title}
                date={post.data.published.toLocaleDateString("default").slice(0, 10)}
                description={post.data.description}
                url={`/private/${post.id}/`}
                tags={post.data.tags}
              />
            ))
          }
        </ul>
      </div>

      {/* No results message */}
      <div id="noResults" class="hidden text-center py-6 text-gray-500 dark:text-gray-400">
        No private notes found matching your search.
      </div>

      {/* Improved Pagination */}
      <div class="flex justify-center mt-8">
        <div class="flex items-center gap-4">
          {/* Previous page button */}
          {currentPage > 1 && (
            <a
              href={currentPage === 2 ? "/private" : `/private/page/${currentPage - 1}`}
              class="inline-flex items-center justify-center px-4 py-2 h-10 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
            >
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
              <span>Previous</span>
            </a>
          )}
          
          {/* Page number buttons */}
          <div class="inline-flex rounded-md overflow-hidden">
            {Array.from({ length: lastPage }, (_, i) => i + 1).map((pageNum) => (
              <a
                href={pageNum === 1 ? "/private" : `/private/page/${pageNum}`}
                class={`relative inline-flex items-center justify-center w-10 h-10 text-sm font-medium transition-colors 
                  ${pageNum === currentPage
                    ? "bg-blue-600 text-white" 
                    : "bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600"
                  }`}
                aria-current={pageNum === currentPage ? "page" : undefined}
              >
                {pageNum}
              </a>
            ))}
          </div>
          
          {/* Next page button */}
          {currentPage < lastPage && (
            <a
              href={`/private/page/${currentPage + 1}`}
              class="inline-flex items-center justify-center px-4 py-2 h-10 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
            >
              <span class="mr-1">Next</span>
              <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          )}
        </div>
      </div>
    </div>
  </PasswordProtection>
</MainLayout>

<script>
  // Initialize search functionality when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput');
    const postsContainer = document.getElementById('postsContainer');
    const noResults = document.getElementById('noResults');
    
    // Add null checks
    if (!searchInput || !postsContainer || !noResults) return;
    
    const allPostItems = Array.from(postsContainer.children);

    // Handle search functionality
    searchInput.addEventListener('input', () => {
      const searchTerm = (searchInput as HTMLInputElement).value.toLowerCase().trim();
      let hasResults = false;

      allPostItems.forEach(post => {
        // Check for title element
        const titleElement = post.querySelector('h2');
        if (!titleElement) return;
        
        const title = titleElement.textContent?.toLowerCase() || '';
        
        // Check description as well
        const descriptionElement = post.querySelector('.post-description');
        const description = descriptionElement?.textContent?.toLowerCase() || '';
        
        // Check tags if they exist
        const tagElements = post.querySelectorAll('.post-tag');
        const tags = Array.from(tagElements).map(tag => tag.textContent?.toLowerCase() || '');
        
        // Match on title, description or tags
        const matchesTitle = title.includes(searchTerm);
        const matchesDesc = description.includes(searchTerm);
        const matchesTags = tags.some(tag => tag.includes(searchTerm));
        
        const matches = matchesTitle || matchesDesc || matchesTags;
        
        post.classList.toggle('hidden', !matches);
        
        if (matches) {
          hasResults = true;
        }
      });

      // Show or hide "no results" message
      noResults.classList.toggle('hidden', hasResults);
    });
  });
</script>