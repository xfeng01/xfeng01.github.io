---
import { getCollection } from "astro:content";
import MainLayout from "../../../layouts/MainLayout.astro";
import PostCard from "../../../components/PostCard.astro";
import TagsList from "../../../components/private/TagsList.astro";
import PasswordProtection from "../../../components/private/PasswordProtection.astro";

export async function getStaticPaths() {
  const allPrivatePosts = await getCollection("personal");
  
  // Get all unique tags from private posts
  const uniqueTags = [
    ...new Set(allPrivatePosts.flatMap((post) => post.data.tags || [])),
  ];

  // Generate a page for each tag
  return uniqueTags.map((tag) => {
    const filteredPosts = allPrivatePosts.filter((post) =>
      post.data.tags?.includes(tag)
    );
    
    // Sort posts by date (newest first)
    const sortedPosts = filteredPosts.sort(
      (a, b) => b.data.published.getTime() - a.data.published.getTime()
    );
    
    return {
      params: { tag },
      props: { posts: sortedPosts, tag },
    };
  });
}

const { tag } = Astro.params;
const { posts } = Astro.props;

// Get all unique tags from all private posts for the tag list
const allPrivatePosts = await getCollection("personal");
const allTags = [
  ...new Set(allPrivatePosts.flatMap((post) => post.data.tags || [])),
];
---

<MainLayout>
  <PasswordProtection>
    <div class="px-4 sm:px-6 md:px-0">
      <div class="mb-6">
        <h1 class="text-2xl font-bold text-gray-800 dark:text-gray-100 mb-2 text-center">
          <span class="text-blue-500 dark:text-blue-400">{tag}</span>
        </h1>
        
        <div class="mt-4">
          <a 
            href="/private" 
            class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:underline"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd" />
            </svg>
            Back to all private notes
          </a>
        </div>
      </div>

      <div class="flex flex-col justify-between items-start mb-4">
        {/* Tag list for filtering */}
        <div class="w-full mb-2">
          <TagsList tags={allTags} baseUrl="/private/tags/" activeTag={tag} />
        </div>
        
        {/* Search box */}
        <div class="search-container w-full">
          <input 
            type="text" 
            id="searchInput"
            placeholder={`Search within "${tag}" notes...`}
            class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>

      {/* Post list */}
      <div>
        <ul id="postsContainer" class="p-0 m-0">
          {
            posts.map((post) => (
              <PostCard
                title={post.data.title}
                date={post.data.published.toLocaleDateString("default").slice(0, 10)}
                description={post.data.description}
                url={`/private/${post.id}/`}
                tags={post.data.tags}
                highlightTag={tag}
              />
            ))
          }
        </ul>
      </div>

      {/* No results message */}
      <div id="noResults" class="hidden text-center py-6 text-gray-500 dark:text-gray-400">
        No private notes found matching your search.
      </div>
    </div>
  </PasswordProtection>
</MainLayout>

<script>
  // Initialize search functionality when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput');
    const postsContainer = document.getElementById('postsContainer');
    const noResults = document.getElementById('noResults');
    
    // Add null checks
    if (!searchInput || !postsContainer || !noResults) return;
    
    const allPostItems = Array.from(postsContainer.children);

    // Handle search functionality
    searchInput.addEventListener('input', () => {
      const searchTerm = (searchInput as HTMLInputElement).value.toLowerCase().trim();
      let hasResults = false;

      allPostItems.forEach(post => {
        // Check for title element
        const titleElement = post.querySelector('h2');
        if (!titleElement) return;
        
        const title = titleElement.textContent?.toLowerCase() || '';
        
        // Check description as well
        const descriptionElement = post.querySelector('.post-description');
        const description = descriptionElement?.textContent?.toLowerCase() || '';
        
        // Match on title or description
        const matches = title.includes(searchTerm) || description.includes(searchTerm);
        
        post.classList.toggle('hidden', !matches);
        
        if (matches) {
          hasResults = true;
        }
      });

      // Show or hide "no results" message
      noResults.classList.toggle('hidden', hasResults);
    });
  });
</script>